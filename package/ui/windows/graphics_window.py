# Form implementation generated from reading ui file '.\designer\graphics_window.ui'
#
# Created by: PyQt6 UI code generator 6.7.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

import re
import typing
from enum import Enum
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtCore import QTimer
from PyQt6.QtGui import QCloseEvent
from PyQt6.QtWidgets import QMainWindow, QWidget, QSizePolicy, QLabel, QHBoxLayout, QVBoxLayout, QHeaderView, \
    QTableWidget
from matplotlib.animation import FuncAnimation

from db.media_db import TMedia
from db.question_db import TQuestion
from package.ui.styles import get_stylesheet

# Graphics
import matplotlib
import seaborn as sns

from package.ui.toast_manager import toasts

matplotlib.use("QtAgg")

from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
import matplotlib.pyplot as plt
from matplotlib.ticker import MaxNLocator

plt.style.use("dark_background")

# Enum
class Table(Enum):
    MEDIA = "Media"
    QUESTIONS = "Preguntas"

# Colors
deep = sns.color_palette("deep")
colorblind = sns.color_palette("colorblind")
pastel = sns.color_palette("pastel")


class MediaCanvas(FigureCanvas):
    def __init__(self, parent=None, df=None):
        self.fig, self.ax = plt.subplots(1, dpi=100, figsize=(3, 3),
                               sharey=True, facecolor="none")

        self.ax.set_facecolor("none")
        self.fig.patch.set_facecolor("none")

        super().__init__(self.fig)

        self.df = df

        # self.setFixedSize(400, 400)

        self.draw_graphic(df)
        # self.animation = FuncAnimation(fig=self.fig, func=self.animate, frames=100, interval=500)

    # def animate(self, frame):
    #     if self.df is not None:
    #         self.draw_graphic(self.df)

    def draw_graphic(self, df):

        if df is None or df.empty:
            return

        self.ax.clear()

        y = df["type"].value_counts()
        x = y.index

        self.ax.set_xlabel("Tipo", labelpad=10)
        self.ax.set_ylabel("Total", labelpad=15)

        self.ax.bar(x, y, width=0.3, color=deep)

        # Ajustar automáticamente los márgenes
        self.fig.tight_layout()

        # Valores enteros
        self.ax.yaxis.set_major_locator(MaxNLocator(integer=True))

        # Ajustar tamaño dinámico según el contenedor
        self.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.updateGeometry()

        self.draw()

    def resizeEvent(self, event):
        """Ajustar el diseño al cambiar el tamaño de la ventana."""
        super().resizeEvent(event)
        self.figure.tight_layout()
        self.draw()


class QuestionCanvas(FigureCanvas):
    def __init__(self, parent=None, df=None):
        self.fig, self.ax = plt.subplots(1, dpi=100, figsize=(3, 3),
                               sharey=True, facecolor="none")

        self.ax.set_facecolor("none")
        self.fig.patch.set_facecolor("none")

        super().__init__(self.fig)

        # self.setFixedSize(400, 400)

        self.draw_graphic(df)


    def draw_graphic(self, df):

        if df is None or df.empty:
            return

        self.ax.clear()

        value_counts = df["expert"].value_counts()

        self.ax.pie(
            value_counts,
            autopct="%.0f%%",
            # labels=value_counts.index,
            colors=pastel,
            explode=(value_counts == max(value_counts)) * 0.08,
        )
        self.ax.legend(labels=[f"{label.capitalize()}: {count}" for label, count in value_counts.items()], loc="best",
                  bbox_to_anchor=(0, 0), ncol=1)

        # Ajustar automáticamente los márgenes
        self.fig.tight_layout()

        # Ajustar tamaño dinámico según el contenedor
        self.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.updateGeometry()

        self.draw()

    def resizeEvent(self, event):
        """Ajustar el diseño al cambiar el tamaño de la ventana."""
        super().resizeEvent(event)
        self.figure.tight_layout()
        self.draw()


class Ui_GraphicsWindow(QMainWindow):
    def __init__(self, parent, window_key, content):
        super().__init__()

        self.parent = parent
        self.window_key = window_key
        self.content = content

        self.df_media = TMedia.get_data_pandas()
        self.df_questions = TQuestion.get_data_pandas()

        if self.df_media.empty and self.df_questions.empty:
            toasts().error('No hay información para mostrar.')

            if self.window_key in self.parent.windows:
                del self.parent.windows[self.window_key]

            QTimer.singleShot(0, self.close) # este se ejecuta de forma asíncrona según el período de tiempo indicado, no genera error de recursión.

            return

        self.setStyleSheet(get_stylesheet())
        self.setupUi(self)
        self.show()
        self.in_real_time()

    def setupUi(self, GraphicsWindow):
        GraphicsWindow.setObjectName("GraphicsWindow")
        GraphicsWindow.resize(800, 600)
        GraphicsWindow.setWindowState(QtCore.Qt.WindowState.WindowMaximized)

        self.main_widget = QtWidgets.QWidget(parent=GraphicsWindow)
        self.main_widget.setObjectName("main_widget")

        self.horizontalLayout = QtWidgets.QHBoxLayout(self.main_widget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")

        self.main_frame = QtWidgets.QFrame(parent=self.main_widget)
        self.main_frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.main_frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.main_frame.setObjectName("main_frame")

        self.verticalLayout = QtWidgets.QVBoxLayout(self.main_frame)
        self.verticalLayout.setObjectName("verticalLayout")

        self.tab_widget = QtWidgets.QTabWidget(parent=self.main_frame)
        self.tab_widget.setMinimumSize(QtCore.QSize(0, 150))
        self.tab_widget.setObjectName("tab_widget")

        self.set_tab_media()
        self.set_tab_questions()
        self.set_tab_history()

        self.verticalLayout.addWidget(self.tab_widget)
        self.horizontalLayout.addWidget(self.main_frame)

        GraphicsWindow.setCentralWidget(self.main_widget)

        self.retranslateUi(GraphicsWindow)
        # self.tab_widget.setCurrentIndex(0 if self.tab_widget.isTabEnabled(0) else 1)
        self.tab_widget.setCurrentIndex(self.tab_widget.indexOf(self.tab_history))

        QtCore.QMetaObject.connectSlotsByName(GraphicsWindow)

    def retranslateUi(self, GraphicsWindow):
        _translate = QtCore.QCoreApplication.translate
        GraphicsWindow.setWindowTitle(_translate("GraphicsWindow", "MainWindow"))
        self.tab_widget.setTabText(self.tab_widget.indexOf(self.tab_media), _translate("GraphicsWindow", "Media"))
        self.tab_widget.setTabText(self.tab_widget.indexOf(self.tab_questions),
                                   _translate("GraphicsWindow", "Preguntas"))
        self.tab_widget.setTabText(self.tab_widget.indexOf(self.tab_history),
                                   _translate("GraphicsWindow", "Historial"))

    def set_tab_media(self):
        self.tab_media = QtWidgets.QWidget()
        self.tab_media.setObjectName("tab_media")

        self.vertical_layout_media = QtWidgets.QVBoxLayout(self.tab_media)
        self.vertical_layout_media.setObjectName("vertical_layout_media")
        self.vertical_layout_media.setContentsMargins(0, 5, 0, 5)

        self.frame_options_media = QtWidgets.QFrame(parent=self.tab_media)
        self.frame_options_media.setMaximumHeight(100)
        # self.frame_options_media.setStyleSheet("border: 1px solid;")
        self.frame_options_media.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_options_media.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_options_media.setObjectName("frame_options_media")

        # vertical_layout_media and frame_graphic_media
        self.vertical_layout_media.addWidget(self.frame_options_media)

        self.frame_graphic_media = QtWidgets.QFrame(parent=self.tab_media)

        # self.frame_graphic_media.setStyleSheet("border: 1px solid;")
        self.frame_graphic_media.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_graphic_media.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)

        self.frame_graphic_media.setObjectName("frame_graphic_media")

        self.vertical_layout_media.addWidget(self.frame_graphic_media)
        self.vertical_layout_media.setStretch(0, 1)
        self.vertical_layout_media.setStretch(1, 5)

        # vertical_layout_graphic_media and layout_graphic_media
        self.vertical_layout_graphic_media = QtWidgets.QVBoxLayout(self.frame_graphic_media)
        self.vertical_layout_graphic_media.setObjectName("vertical_layout_graphic_media")

        self.layout_graphic_media = QtWidgets.QVBoxLayout()
        self.layout_graphic_media.setObjectName("layout_graphic_media")

        self.vertical_layout_graphic_media.addLayout(self.layout_graphic_media)

        self.tab_widget.addTab(self.tab_media, "")

        # Styles
        self.frame_options_media.setStyleSheet("""
            border: none;
            background-color: #2e2e2e; /* Fondo oscuro opcional */
        """)

        self.frame_graphic_media.setStyleSheet("""
            border: none;
            background-color: #2e2e2e; /* Fondo oscuro opcional */
        """)

        # self.set_graphic_media()

    # def set_graphic_media(self):
        # get_data
        # df = TMedia.get_data_pandas()
        df = self.df_media

        self.tab_widget.setTabEnabled(0, not df.empty)

        if df.empty:
            return

        # Elements options
        self.set_layout_options_media(df)

        # Graphic
        self.graphic_media = MediaCanvas(df=df)
        self.layout_graphic_media.addWidget(self.graphic_media)

    def set_layout_options_media(self, df):
        # Usamos QGridLayout para colocar los elementos como tarjetas
        layout_options_media = QtWidgets.QGridLayout()
        layout_options_media.setObjectName("layout_graphic_media")

        self.frame_options_media.setLayout(layout_options_media)

        value_counts = df["type"].value_counts()
        items = [(label, count) for label, count in value_counts.items()]

        self.add_elements_grid(items, layout_options_media)

    def set_tab_questions(self):
        # tab_questions
        self.tab_questions = QtWidgets.QWidget()
        self.tab_questions.setObjectName("tab_questions")

        self.vertical_layout_questions = QtWidgets.QVBoxLayout(self.tab_questions)
        self.vertical_layout_questions.setObjectName("vertical_layout_questions")
        self.vertical_layout_questions.setContentsMargins(0, 5, 0, 5)

        self.frame_options_question = QtWidgets.QFrame(parent=self.tab_questions)
        self.frame_options_question.setMaximumHeight(100)
        # self.frame_options_question.setStyleSheet("border: 1px solid;")
        self.frame_options_question.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_options_question.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_options_question.setObjectName("frame_options_question")

        # self.vertical_layout_questions.addWidget(self.frame_options_question)

        self.frame_graphic_question = QtWidgets.QFrame(parent=self.tab_questions)
        # self.frame_graphic_question.setStyleSheet("border: 1px solid;")
        self.frame_graphic_question.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_graphic_question.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_graphic_question.setObjectName("frame_graphic_question")

        self.vertical_layout_questions.addWidget(self.frame_graphic_question)
        self.vertical_layout_questions.setStretch(0, 1)
        self.vertical_layout_questions.setStretch(1, 5)

        # vertical_layout_graphic_questions and layout_graphic_questions
        self.vertical_layout_graphic_questions = QtWidgets.QVBoxLayout(self.frame_graphic_question)
        self.vertical_layout_graphic_questions.setObjectName("vertical_layout_graphic_questions")

        self.layout_graphic_questions = QtWidgets.QVBoxLayout()
        self.layout_graphic_questions.setObjectName("layout_graphic_questions")

        self.vertical_layout_graphic_questions.addLayout(self.layout_graphic_questions)

        self.tab_widget.addTab(self.tab_questions, "")

        # Styles
        self.frame_options_question.setStyleSheet("""
            border: none;
            background-color: #2e2e2e; /* Fondo oscuro opcional */
        """)

        self.frame_graphic_question.setStyleSheet("""
            border: none;
            background-color: #2e2e2e; /* Fondo oscuro opcional */
        """)
        # border: 1px ;
        # border-radius: 10px; /* Borde redondeado */

        # get_data
        # df = TQuestion.get_data_pandas()
        df = self.df_questions

        self.tab_widget.setTabEnabled(1, not df.empty)

        if df.empty:
            return

        # Elements options
        self.set_layout_options_questions(df)

        # Graphic
        self.graphic_question = QuestionCanvas(df=df)
        self.layout_graphic_questions.addWidget(self.graphic_question)

    def set_layout_options_questions(self, df):
        # Usamos QGridLayout para colocar los elementos como tarjetas
        layout_options_questions = QtWidgets.QGridLayout()
        layout_options_questions.setObjectName("layout_graphic_media")

        self.frame_options_question.setLayout(layout_options_questions)

        value_counts = df["expert"].value_counts()
        items = [(label, count) for label, count in value_counts.items()]

        self.add_elements_grid(items, layout_options_questions)

    def set_tab_history(self):
        self.tab_history = QtWidgets.QWidget()
        self.tab_history.setObjectName("tab_history")

        self.vertical_layout_history = QtWidgets.QVBoxLayout(self.tab_history)
        # self.vertical_layout_history.setContentsMargins(0, 10, 0, 0)
        self.vertical_layout_history.setObjectName("vertical_layout_history")

        self.title_history = QtWidgets.QLabel(parent=self.tab_history)
        self.title_history.setObjectName("title_history")
        self.title_history.setText('Historial')

        self.vertical_layout_history.addWidget(self.title_history)

        self.frame_options_history = QtWidgets.QFrame(parent=self.tab_history)
        # self.frame_options_history.setMaximumSize(QtCore.QSize(16777215, 100))
        # self.frame_options_history.setStyleSheet("border: 1px solid;")
        self.frame_options_history.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_options_history.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_options_history.setObjectName("frame_options_history")

        # Horizontal layout in frame options
        self.horizontal_layout_table_history = QtWidgets.QHBoxLayout(self.frame_options_history)
        self.horizontal_layout_table_history.setContentsMargins(0, 0, 0, 0)
        self.horizontal_layout_table_history.setObjectName("horizontal_layout_table_history")

        self.layout_grid_options_history = QtWidgets.QGridLayout()
        self.layout_grid_options_history.setContentsMargins(5, 5, 5, 5)
        self.layout_grid_options_history.setObjectName("layout_grid_options_history")

        # combobox
        self.combobox_tables = QtWidgets.QComboBox(parent=self.frame_options_history)
        self.combobox_tables.setGeometry(QtCore.QRect(20, 40, 281, 22))
        self.combobox_tables.setObjectName("combobox_tables")

        tables = [t.value for t in Table]
        self.combobox_tables.addItems(tables)

        self.combobox_tables.setCursor(QtCore.Qt.CursorShape.PointingHandCursor)
        view = self.combobox_tables.view()
        if view:
            view.setCursor(QtCore.Qt.CursorShape.PointingHandCursor)

        self.combobox_tables.currentTextChanged.connect(self.handle_change_combobox)

        self.layout_grid_options_history.addWidget(self.combobox_tables, 0, 1, 1, 1)
        self.layout_grid_options_history.addWidget(self.title_history, 0, 0)
        self.horizontal_layout_table_history.addLayout(self.layout_grid_options_history)

        self.vertical_layout_history.addWidget(self.frame_options_history)

        self.frame_graphic_history = QtWidgets.QFrame(parent=self.tab_history)
        # self.frame_graphic_history.setStyleSheet("border: 1px solid;")
        self.frame_graphic_history.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_graphic_history.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_graphic_history.setObjectName("frame_graphic_history")

        self.vertical_layout_table_history = QtWidgets.QVBoxLayout(self.frame_graphic_history)
        self.vertical_layout_table_history.setContentsMargins(0, 0, 0, 0)
        self.vertical_layout_table_history.setObjectName("vertical_layout_table_history")

        self.layout_graphic_history = QtWidgets.QVBoxLayout()
        self.layout_graphic_history.setObjectName("layout_graphic_history")

        # Table history
        self.set_table_history()

        self.vertical_layout_table_history.addLayout(self.layout_graphic_history)
        self.vertical_layout_history.addWidget(self.frame_graphic_history)

        self.vertical_layout_history.setStretch(1, 1)
        self.vertical_layout_history.setStretch(2, 5)

        self.tab_widget.addTab(self.tab_history, "")

    def set_table_history(self):
        self.table_widget = QtWidgets.QTableWidget(parent=self.frame_graphic_history)
        self.table_widget.setObjectName("table_widget")

        # Deshabilita la edición
        self.table_widget.setEditTriggers(QtWidgets.QAbstractItemView.EditTrigger.NoEditTriggers)

        # Deshabilita arrastrar y soltar
        self.table_widget.setDragDropOverwriteMode(False)

        # Selecciona una fila a la vez
        self.table_widget.setSelectionMode(QtWidgets.QAbstractItemView.SelectionMode.SingleSelection)

        # Ajuste de palabras de texto
        self.table_widget.setWordWrap(False)

        # Oculta el header vertical
        self.table_widget.verticalHeader().setVisible(False)

        self.table_widget.horizontalHeader().setDefaultAlignment(QtCore.Qt.AlignmentFlag.AlignHCenter | QtCore.Qt.AlignmentFlag.AlignVCenter | QtCore.Qt.AlignmentFlag.AlignCenter)

        # Valor por defecto
        default = Table.MEDIA.value if self.tab_widget.isTabEnabled(0) else Table.QUESTIONS.value
        self.handle_change_data_table(default)

        self.layout_graphic_history.addWidget(self.table_widget)

    def handle_change_combobox(self, value):
        self.handle_change_data_table(value)

    def handle_change_data_table(self, table):

        df = self.df_media if re.match(table, Table.MEDIA.value, re.IGNORECASE | re.MULTILINE) else self.df_questions
        columns = list(df.columns)

        self.table_widget.setColumnCount(len(columns))
        self.table_widget.setHorizontalHeaderLabels(columns)

        for i in range(len(columns)):
            self.table_widget.horizontalHeader().setSectionResizeMode(i, QHeaderView.ResizeMode.Stretch)

        data = df.values.tolist()
        self.table_widget.setRowCount(len(data))

        row = 0
        for item in data:
            id_row = QtWidgets.QTableWidgetItem(str(item[0]))
            id_row.setTextAlignment(QtCore.Qt.AlignmentFlag.AlignVCenter | QtCore.Qt.AlignmentFlag.AlignHCenter)

            self.table_widget.setItem(row, 0, id_row)
            self.table_widget.setItem(row, 1, QtWidgets.QTableWidgetItem(item[1]))
            self.table_widget.setItem(row, 2, QtWidgets.QTableWidgetItem(item[2]))
            self.table_widget.setItem(row, 3, QtWidgets.QTableWidgetItem(item[3]))
            self.table_widget.setItem(row, 4, QtWidgets.QTableWidgetItem(item[4]))

            if len(item) > 5:
                self.table_widget.setItem(row, 5, QtWidgets.QTableWidgetItem(item[5]))

            row += 1

    def add_elements_grid(self, items, layout):

        items_per_row = 3

        row = 0
        col = 0

        for i, (name, count) in enumerate(items):
            label = QLabel(f"{name.capitalize()}: {count}", self)
            # label.setStyleSheet('background-color: lightblue; border: 1px solid black; padding: 10px;')

            label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)

            container_layout = QVBoxLayout()
            container_layout.addWidget(label)

            layout.addLayout(container_layout, row, col)

            col += 1
            if col == items_per_row:
                col = 0
                row += 1

    def in_real_time(self):
        self.timer = QTimer()
        self.timer.setInterval(2500)

        self.timer.timeout.connect(self.update_data)

        self.timer.start()

    def update_data(self):
        self.df_media = TMedia.get_data_pandas()
        self.df_questions = TQuestion.get_data_pandas()

        # self.set_graphic_media()
        # self.set_graphic_questions()
        self.graphic_media.draw_graphic(self.df_media)
        self.graphic_question.draw_graphic(self.df_questions)
        self.handle_change_data_table(self.combobox_tables.currentText())

    def closeEvent(self, a0: typing.Optional[QCloseEvent]) -> None:
        if hasattr(self, "timer") and self.timer.isActive():
            self.timer.stop()

        # if hasattr(self.graphic_media, "animation") and self.graphic_media.animation:
        #     self.graphic_media.animation.event_source.stop()

        # if hasattr(self.graphic_question, "animation") and self.graphic_question.animation:
        #     self.graphic_question.animation.event_source.stop()

        if not hasattr(self.parent, "windows") or not isinstance(self.parent, QWidget):
            return

        self.parent.handle_windows(self.window_key, content=self.content)

        return super().closeEvent(a0)